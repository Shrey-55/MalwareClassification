# train.py
# This file contains the training loop for the LeViT model using PyTorch.

import torch
import os
from torch.utils.data import DataLoader
from sklearn.metrics import accuracy_score

def train_model(model, train_loader, val_loader, epochs=20, learning_rate=0.001, model_dir='models/'):
    """
    Train the LeViT model with the given training data using PyTorch.

    Args:
    - model (nn.Module): The LeViT model.
    - train_loader (DataLoader): The DataLoader for training data.
    - val_loader (DataLoader): The DataLoader for validation data.
    - epochs (int): The number of epochs to train.
    - learning_rate (float): The learning rate.
    - model_dir (str): Directory to save the model.

    Returns:
    - history: A list of training losses and validation accuracies.
    """
    if not os.path.exists(model_dir):
        os.makedirs(model_dir)
    
    # Set up loss function and optimizer
    criterion = torch.nn.CrossEntropyLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    model.to(device)

    history = {'train_loss': [], 'val_accuracy': []}
    
    for epoch in range(epochs):
        model.train()
        running_loss = 0.0
        for images, labels in train_loader:
            images, labels = images.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            running_loss += loss.item()
        
        # Validation
        model.eval()
        val_preds, val_labels = [], []
        with torch.no_grad():
            for images, labels in val_loader:
                images, labels = images.to(device), labels.to(device)
                outputs = model(images)
                _, preds = torch.max(outputs, 1)
                val_preds.extend(preds.cpu().numpy())
                val_labels.extend(labels.cpu().numpy())

        # Calculate metrics
        val_accuracy = accuracy_score(val_labels, val_preds)
        history['train_loss'].append(running_loss / len(train_loader))
        history['val_accuracy'].append(val_accuracy)

        print(f"Epoch [{epoch+1}/{epochs}] - Loss: {running_loss:.4f}, Val Accuracy: {val_accuracy:.4f}")

    # Save model
    torch.save(model.state_dict(), os.path.join(model_dir, 'levit_model.pth'))
    
    return history
